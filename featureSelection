import glob


#===========================================================================
#===========================================================================
#       This file creates a task list batches of features
#       to run the information gain algorithm on. Since
#       that work can be parallelized within the Taylor
#       CSE computers I am running the tasklist from JOHN
#===========================================================================
#===========================================================================

TRAIN_FILE_PATH = "/media/napster/data/train/"  # "F:/train/"
MALWARE_FILE_PATH = TRAIN_FILE_PATH + "train/"

ASM_Files = glob.glob(MALWARE_FILE_PATH + "*.asm")
CLASS_Files = TRAIN_FILE_PATH + "trainLabels.txt"

#i am going to seek to parallelize the code inside of this function
#i will be sending out the processes to the CSE computers
def createInformationGainTaskList():

    #process ->
    #   1. Go through all files and list all unique ngrams
    #   2. Split list of all ngrams into tasks

    doneLog = {}
    batchSize = 5

    batch = []

    myTaskLogFile = open(TRAIN_FILE_PATH + "TaskLog.txt", 'a')

    for fName in range(len(ASM_Files)):
        fString = ""
        if fName % 10 == 0:
            print(str(fName) + "   |   " + str(len(ASM_Files)))

        fileStub = ASM_Files[fName].split('/')[-1][:-4]
        try:
            file = open(TRAIN_FILE_PATH + "nGramFeatures/" + fileStub + ".txt", 'r')
            nGramDict = dict(eval(file.readline()))
            file.close()
        except FileNotFoundError:
            print("---- " + fileStub + " not found ----")
            continue

        for k,v in nGramDict.items():
            if not k in doneLog:
                #An ngram has been selected for evaluation
                doneLog[k] = True
                batch.append(k)
                if len(batch) == batchSize:
                    fString = fString + str(batch) + "\n"
                    batch = []

        myTaskLogFile.write(fString)

    myTaskLogFile.close()


createInformationGainTaskList()